<?php


namespace App\Tests\Util;


use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\ApiTestCase;
use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\Client;
use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Contracts\HttpClient\ResponseInterface;

class BaseTestCase extends ApiTestCase
{
    /**
     * @var Client
     */
    protected $client;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client = self::createClient();
    }

    protected function request(string $method, string $url, array $options = [], array $checks = []) {
        $checks = array_merge([
            'checkSuccess' => true,
            'checkData' => null
        ],$checks);
        $resp = $this->client->request($method,$url,$options);
        if($checks['checkSuccess']){
            $this->assertResponseIsSuccessful();
        }
        return $resp->toArray(false);
    }

    protected function createResource(string $resource, array $data, array $opts = []){
        $opts = array_merge([
            'validateResponse' => true,
            'validateResponseData' => null
        ],$opts);
        if(strpos($resource, "/api") === false){
            $resource = "/api" . $resource;
        }
        $responseData = $this->request('POST',"$resource",[
            'json' => $data
        ], ['checkSuccess' => true]);

        if($opts['validateResponse']){
            $this->assertArraySubset($opts['validateResponseData'] ?? $data,$responseData);
        }

        return $responseData;
    }

    protected function updateResource(string $resource, array $data, array $opts = []){
        $opts = array_merge([
            'validateResponse' => true,
            'validateResponseData' => null
        ],$opts);
        if(strpos($resource, "/api") === false){
            $resource = "/api" . $resource;
        }
        $responseData = $this->request('PUT',"$resource",[
            'json' => $data
        ], ['checkSuccess' => true]);

        if($opts['validateResponse']){
            $this->assertArraySubset($opts['validateResponseData'] ?? $data,$responseData);
        }

        return $responseData;
    }

    protected function getResource(string $resource, array $params, array $opts = []){
        $opts = array_merge([
            'validateResponse' => true,
            'validateResponseData' => null
        ],$opts);
        if(strpos($resource, "/api") === false){
            $resource = "/api" . $resource;
        }
        $responseData = $this->request('GET',$resource,[
            'query' => $params
        ], ['checkSuccess' => true]);

        if($opts['validateResponse']){
            $this->assertArraySubset($opts['validateResponseData'],$responseData);
        }

        return $responseData;
    }


}